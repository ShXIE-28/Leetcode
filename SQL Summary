## Easy

# 175. Combine Two Tables
SELECT FirstName, LastName, City, State FROM
Person LEFT JOIN Address ON Person.PersonID = Address.PersonID;

# 176. Second Highest Salary
SELECT IFNULL((SELECT DISTINCT Salary FROM Employee ORDER BY Salary DESC LIMIT 1,1),null) AS SecondHighestSalary;

# 181. Employees Earning More Than Their Managers
SELECT e1.Name AS Employee FROM 
Employee e1 LEFT JOIN Employee e2
ON e1.ManagerId = e2.Id
WHERE e1.Salary > e2.Salary

# 182. Duplicate Emails
SELECT Email FROM Person GROUP BY Email HAVING COUNT(Email) > 1

# 183. Customers Who Never Order
SELECT Customers.Name AS `Customers`
FROM Customers 
WHERE Customers.Id NOT IN (SELECT CustomerId from Orders)

# 196. Delete Duplicate Emails
delete a from Person as a, Person as b where a.Email = b.Email and a.Id > b.Id

# 197. Rising Temperature
select b.id as id from weather as a, weather as b 
where to_days(a.recordDate) = to_days(b.recordDate)-1 and a.Temperature < b.Temperature

# 262. Trips and Users
select request_at as Day, round(sum(if(status='completed',0,1))/count(*),2) as `Cancellation Rate`
from trips 
right join users as u1 on trips.client_id = u1.users_id 
right join users as u2 on trips.driver_id = u2.users_id 
where (u1.role = 'client' or u2.role = 'driver') and u1.banned = 'No' and u2.banned = 'No'
    and request_at between "2013-10-01" and "2013-10-03"
group by request_at

# 627. Swap Salary
update salary
set sex = case sex when 'm' then 'f' else 'm' end

-----------------------------------------------------------------------------------------------------------------------------------------------
## Medium

# 177. Nth Highest Salary
CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT
BEGIN
    DECLARE M INT;
    SET M = N - 1;
  RETURN (
      # Write your MySQL query statement below.
      SELECT DISTINCT Salary FROM Employee ORDER BY Salary DESC LIMIT M,1
  );
END

# 178. Rank Scores
SELECT Score, dense_rank() over (order by Score DESC) as `Rank`
from Scores;

# 180. Consecutive Numbers
SELECT DISTINCT l1.Num AS `ConsecutiveNums`
FROM Logs l1, Logs l2, Logs l3
WHERE l1.Id = l2.Id - 1 AND l2.Id = l3.Id - 1
    AND l1.Num = l2.Num AND l2.Num = l3.Num

# 184. Department Highest Salary
SELECT d.Name AS `Department`, e.Name AS `Employee`, e.Salary AS `Salary`
FROM Employee e, Department d
WHERE e.DepartmentId = d.Id
AND (e.Salary,e.DepartmentId) IN (SELECT MAX(Salary), DepartmentId FROM Employee GROUP BY DepartmentId)

# 626. Exchange Seats
select
(case when mod(id,2)!=0 and counts!=id then id+1
      when mod(id,2)!=0 and counts=id then id
      else id-1 end) as id,
      student
from
    seat,
    (select count(*) as counts from seat) as seat_counts
order by id asc
# select * from
# (select id+1 as id, student from seat where mod(id,2)=1 and id not in (select count(*) from seat)
# union select id-1 as id, student from seat where mod(id,2)=0
# union select id as id, student from seat where mod(id,2)=1 and id = (select count(*) from seat)) as a
# order by id



-----------------------------------------------------------------------------------------------------------------------------------------------
## Hard

# 185. Department Top Three Salaries
select d.Name as Department, a. Name as Employee, a. Salary 
from (
select e.*, dense_rank() over (partition by DepartmentId order by Salary desc) as DeptPayRank 
from Employee e 
) a 
join Department d
on a. DepartmentId = d. Id 
where DeptPayRank <=3
# SELECT d.Name AS `Department`, e.Name AS `Employee`, e.Salary AS `Salary`
# FROM Employee e LEFT JOIN Department d ON e.DepartmentId = d.Id
# WHERE (e.DepartmentId, e.Salary) IN (select departmentid, salary from(select salary, departmentid, 
#                                             dense_rank() over(partition by departmentid order by salary desc) as `rank` from employee) as t where t.rank <= 3)

# 601. Human Traffic of Stadium
select distinct s1.*
from Stadium as s1, Stadium as s2, Stadium as s3
where s1.people>=100 and s2.people>=100 and s3.people>=100
    and ((s2.id-s1.id=1 and s3.id-s1.id=2) or (s3.id-s2.id=2 and s1.id-s2.id=1) or (s1.id-s2.id=1 and s1.id-s3.id=2))
order by s1.id
